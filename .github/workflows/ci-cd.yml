
name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install
    - run: npm test

  #  sonarqube:
#    runs-on: ubuntu-latest
#    needs: build
#    steps:
#    - uses: actions/checkout@v3
#      with:
#        # Disabling shallow clone is recommended for improving relevancy of reporting
#        fetch-depth: 0
#    - name: SonarQube Scan
#      uses: SonarSource/sonarcloud-github-action@master
#      with:
#        # Additional arguments for the sonarcloud scanner
#        args: >
#          -Dsonar.organization=your-org-key
#          -Dsonar.projectKey=your-project-key
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
#        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # Generate a token on SonarQube/SonarCloud

  docker:
    runs-on: ubuntu-latest
    needs: build
    # Only run this job when pushing to the main branch
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v3
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/simple-node-app:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: docker
    steps:
    - name: Deploy to staging
      run: echo "Deploying to staging environment..."
      # In Part II, we will replace this with steps to deploy to our EC2 instance and Minikube cluster.

  notify:
    runs-on: ubuntu-latest
    # Only run this job if any of the previous jobs have failed
    if: failure()
    needs: [build, docker, deploy]
    steps:
    - name: Notify on failure
      run: echo "A job has failed. Sending notification..."
      # You can replace this with a more sophisticated notification, like sending a Slack message.
